{"version":3,"sources":["webpack:///./src/components/InterestingCard/index.js","webpack:///./src/components/ArticleCard/index.js","webpack:///./src/pages/index.js"],"names":["Box","styled","div","props","perspective","InterestingCard","children","boxRef","useRef","bodyRef","mousemoveFn","e","body","centerX","offsetLeft","offsetWidth","centerY","offsetTop","offsetHeight","percentageX","clientX","percentageY","clientY","style","transform","mouseLeaveFn","useEffect","box","current","onmousemove","onmouseleave","ref","Container","ImageContainer","banner","TextContainer","Title","Description","ArticleFooter","Line","DateText","BanerTitle","BannerText","ArticleCard","list","map","node","to","fields","slug","frontmatter","title","excerpt","date","ArticleContainer","AuthorInfo","connect","state","isDarkMode","app","data","dispatch","console","log","allMarkdownRemark","edges","query"],"mappings":"mUAGA,IAAMA,EAAMC,IAAOC,IAAV,KAEU,SAAAC,GAAK,OAAIA,EAAMC,eA4DnBC,EAxDS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUF,EAAkB,EAAlBA,YAC3BG,EAASC,iBAAO,MAChBC,EAAUD,iBAAO,MAEjBE,EAAc,SAACC,EAAGC,GAEpB,IAAIC,EAAUD,EAAKE,WAAaF,EAAKG,YAAc,EAC/CC,EAAUJ,EAAKK,UAAYL,EAAKM,aAAe,EAQ/CC,GAJSR,EAAES,QAAUP,GAIEA,EACvBQ,GAJSV,EAAEW,QAAUN,GAIEA,EAK3BJ,EAAKW,MAAMC,UAAY,YAHb,GAG0BH,EAAqB,eAH/C,GAGqEF,EAAoB,QAGjGM,EAAe,SAACd,EAAGC,GACrBA,EAAKW,MAAMC,UAAY,IAoB3B,OAjBAE,qBAAU,WACN,IAAMC,EAAMpB,EAAOqB,QACbhB,EAAOH,EAAQmB,QAQrB,OAPAD,EAAIE,YAAc,SAAClB,GACfD,EAAYC,EAAGC,IAEnBe,EAAIG,aAAe,SAACnB,GAChBc,EAAad,EAAGC,IAGb,WACHe,EAAIE,YAAc,KAClBF,EAAIG,aAAe,QAExB,CAACL,EAAcf,EAAaH,EAAQE,IAInC,oCACI,kBAACT,EAAD,CAAK+B,IAAKxB,EAAQH,YAAaA,GAC3B,yBAAK2B,IAAKtB,GACLH,M,0sECpDrB,IAAM0B,EAAY/B,IAAOC,IAAV,KAMT+B,EAAiBhC,IAAOC,IAAV,KACE,SAACC,GAAD,OAAWA,EAAM+B,UASjCC,EAAgBlC,IAAOC,IAAV,KAMbkC,EAAQnC,IAAOC,IAAV,KAyBLmC,EAAcpC,IAAOC,IAAV,KAKXoC,EAAgBrC,IAAOC,IAAV,KAIbqC,EAAOtC,IAAOC,IAAV,KAIJsC,EAAWvC,IAAOC,IAAV,KAMRuC,EAAaxC,IAAOC,IAAV,KAmBVwC,EAAazC,IAAOC,IAAV,KAwDDyC,IA7CK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACI,oCAEQA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACL,kBAAC,EAAD,CAAiB1C,YAAa,KAC1B,kBAAE4B,EAAF,KACI,kBAAC,IAAD,CACIe,GAAID,EAAKE,OAAOC,MAEhB,kBAAChB,EAAD,CAAgBC,OAAQY,EAAKI,YAAYhB,QACrC,kBAACO,EAAD,KACI,kBAACC,EAAD,KACKI,EAAKI,YAAYC,UAKlC,kBAAChB,EAAD,KACI,kBAAC,IAAD,CACIY,GAAID,EAAKE,OAAOC,MAEhB,kBAACb,EAAD,KACKU,EAAKI,YAAYC,QAG1B,kBAACd,EAAD,KACKS,EAAKM,UAGd,kBAACd,EAAD,KACI,kBAACC,EAAD,MACA,kBAACC,EAAD,KACKM,EAAKI,YAAYG,e,8bC5HtD,IAAMC,EAAmBrD,IAAOC,IAAV,KAKhBqD,EAAatD,IAAOC,IAAV,KAqBDsD,uBAAQ,SAAAC,GAAK,MAAK,CAC/BC,WAAYD,EAAME,IAAID,cACpB,KAFWF,EAfD,SAAC,GAAoC,IAAlCI,EAAiC,EAAjCA,KAAMF,EAA2B,EAA3BA,WAAYG,EAAe,EAAfA,SAEjC,OADAC,QAAQC,IAAIL,EAAYG,GAEtB,kBAAC,IAAD,KACE,kBAACN,EAAD,KACE,kBAAC,IAAD,CAAaK,KAAMA,KAErB,kBAACN,EAAD,KACE,kBAAC,IAAD,CAAaV,KAAMgB,EAAKI,kBAAkBC,aAW3C,IAAMC,EAAK","file":"component---src-pages-index-js-5cf7ed1b2e4c47645b8b.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst Box = styled.div`\n    /*perspective  是css透视属性 这个效果实现的关键 而且要加在父级*/\n    perspective: ${props => props.perspective}px;\n`;\n\n\nconst InterestingCard = ({ children, perspective }) => {\n    const boxRef = useRef(null);\n    const bodyRef = useRef(null);\n\n    const mousemoveFn = (e, body) => {\n        //获取banner的X轴的中心 和 y轴的中心\n        var centerX = body.offsetLeft + body.offsetWidth / 2;\n        var centerY = body.offsetTop + body.offsetHeight / 2;\n\n        //获取鼠标到中心的位置距离\n        //e.page指鼠标到banner到边缘的位置\n        var deltaX = e.clientX - centerX;\n        var deltaY = e.clientY - centerY;\n\n        //获取鼠标到中心距离与中心长度的比率 距离中心越远比越大 倾斜角度越大\n        var percentageX = deltaX / centerX;\n        var percentageY = deltaY / centerY;\n        //常数\n        var deg = 10;\n\n        //个人觉得X轴旋转用Y轴的比率 y轴的旋转倾斜角度用X轴的比率  这样可用无视正负 都是有向下倾斜的感觉\n        body.style.transform = \"rotateX(\" + percentageY * -deg + \"deg)\" + \"rotateY(\" + percentageX * deg + \"deg)\";\n    }\n\n    const mouseLeaveFn = (e, body) => {\n        body.style.transform = ''\n    }\n\n    useEffect(() => {\n        const box = boxRef.current;\n        const body = bodyRef.current;\n        box.onmousemove = (e) => {\n            mousemoveFn(e, body);\n        }\n        box.onmouseleave = (e) => {\n            mouseLeaveFn(e, body);\n        };\n\n        return () => {\n            box.onmousemove = null;\n            box.onmouseleave = null;\n        }\n    }, [mouseLeaveFn, mousemoveFn, boxRef, bodyRef])\n\n\n    return (\n        <>\n            <Box ref={boxRef} perspective={perspective}>\n                <div ref={bodyRef}>\n                    {children}\n                </div>\n            </Box>\n        </>\n    )\n}\n\nexport default InterestingCard;","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nimport InterestingCard from '../InterestingCard/index';\n\nconst Container = styled.div`\n    background: #fff;\n    border-radius: .5rem;\n    margin-bottom: 1rem;\n`;\n\nconst ImageContainer = styled.div`\n    background: url(${(props) => props.banner}) no-repeat center center;\n    background-size: cover;\n    height: 15rem;\n    border-radius: .5rem .5rem 0 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst TextContainer = styled.div`\n    padding: .5rem 2rem;\n    display: flex;\n    flex-flow: column nowrap;\n`;\n\nconst Title = styled.div`\n    font-size: 1rem;\n    line-height: 2.5rem;\n    position: relative;\n    padding: 1rem 0;\n    cursor: pointer;\n\n    ::after{\n        content: '';\n        background: #decb4c;\n        content: \"\";\n        display: inline-block;\n        width: 2rem;\n        height: .1rem;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        margin-bottom: 1rem;\n    }\n\n    :hover {\n         text-decoration: underline\n     }\n`;\n\nconst Description = styled.div`\n    font-size: .8rem;\n    overflow: hidden;\n    flex: 1;\n`;\nconst ArticleFooter = styled.div`\n    padding: 0 2rem .5rem 2rem;\n`;\n\nconst Line = styled.div`\n    border-top: 1px solid #ececec;\n`;\n\nconst DateText = styled.div`\n    color: #989b9d;\n    padding: 1rem 0;\n    font-size: .8rem;\n`;\n\nconst BanerTitle = styled.div`\n    flex-flow: column nowrap;\n    font-family: 'Oswald', sans-serif;\n    color: #000;\n    font-size: 1.5rem;\n    height: 50%;\n    min-width: 60%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: .5rem double;\n    border-color: rgba(255, 255, 255, .8);\n    margin: 1rem;\n\n    @media (max-width: 800px) {\n        display: none;\n    }\n`;\n\nconst BannerText = styled.div`\n    padding: 2rem;\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: rgba(255, 255, 255, .8);\n    width: 100%;\n    font-size: 1rem;\n`;\n\nconst ArticleCard = ({ list }) => {\n    return (\n        <>\n            {\n                list.map(({ node }) => (\n                    <InterestingCard perspective={2000}>\n                        < Container >\n                            <Link\n                                to={node.fields.slug}\n                            >\n                                <ImageContainer banner={node.frontmatter.banner}>\n                                    <BanerTitle>\n                                        <BannerText>\n                                            {node.frontmatter.title}\n                                        </BannerText>\n                                    </BanerTitle>\n                                </ImageContainer>\n                            </Link>\n                            <TextContainer>\n                                <Link\n                                    to={node.fields.slug}\n                                >\n                                    <Title>\n                                        {node.frontmatter.title}\n                                    </Title>\n                                </Link>\n                                <Description>\n                                    {node.excerpt}\n                                </Description>\n                            </TextContainer>\n                            <ArticleFooter>\n                                <Line />\n                                <DateText>\n                                    {node.frontmatter.date}\n                                </DateText>\n                            </ArticleFooter>\n                        </Container>\n\n                    </InterestingCard>\n                ))\n            }\n        </>\n    );\n}\n\nexport default ArticleCard;","import React from 'react';\nimport Layout from '../components/Layout/index.js';\nimport { graphql } from \"gatsby\"\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\n\nimport ArticleCard from '../components/ArticleCard/index.js';\nimport LeftNavCard from '../components/LeftNavCard/index.js';\n\nimport { toggleDarkMode } from '../state/app';\n\nconst ArticleContainer = styled.div`\n    flex: 1;\n    margin-left: 1rem;\n`;\n\nconst AuthorInfo = styled.div`\n   @media (max-width: 800px) {\n      display: none;\n    }\n`;\n\nconst Index = ({ data, isDarkMode, dispatch }) => {\n  console.log(isDarkMode, dispatch)\n  return (\n    <Layout>\n      <AuthorInfo>\n        <LeftNavCard data={data} />\n      </AuthorInfo>\n      <ArticleContainer>\n        <ArticleCard list={data.allMarkdownRemark.edges} />\n      </ArticleContainer>\n    </Layout>\n  )\n}\n\n\nexport default connect(state => ({\n  isDarkMode: state.app.isDarkMode\n}), null)(Index);\n\nexport const query = graphql`\n  query {\n        site {\n            siteMetadata {\n                title\n                author {\n                    name\n                    github\n                    juejin\n                    twitter\n                    email\n                }\n            }\n\n         \n        }\n        allMarkdownRemark(limit: 10) {\n            totalCount\n            edges {\n              node {\n                id\n                frontmatter {\n                  title\n                  date(formatString: \"DD MMMM, YYYY\")\n                  tag\n                  banner\n                }\n                fields {\n                  slug\n                }\n                excerpt\n              }\n            }\n        }\n        allTags:   allMarkdownRemark(filter: {frontmatter: {tag: {ne: null}}}) {\n            totalCount\n            edges {\n              node {\n                id\n                excerpt\n                frontmatter {\n                  tag\n                  title\n                  date(formatString: \"DD MMMM, YYYY\")\n                }\n                fields {\n                    slug\n                }\n              }\n            }\n          }\n    }\n`"],"sourceRoot":""}