{"componentChunkName":"component---src-templates-blog-post-js","path":"/md/react/100个hook案例/","result":{"data":{"markdownRemark":{"html":"<h1>关于hook的最佳实践</h1>\n<h2>使用useState达到forceUpdate</h2>\n<p>Class组件可以通过forceUpdate实例方法来触发强制重新渲染。使用useState也可以模拟相同的效果：</p>\n<pre><code class=\"language-js\">export default function useForceUpdate() {\n  const [, setValue] = useState(0)\n  return useCallback(() => {\n    // 递增state值，强制React进行重新渲染\n    setValue(val => (val + 1) % (Number.MAX_SAFE_INTEGER - 1))\n  }, [])\n}\n</code></pre>\n<h2>使用react-hook封装localStorage的操作</h2>\n<p>简而言之， 把store的源放在浏览器的store中， 这是有意义的。</p>\n<pre><code class=\"language-ts\">import { useState, useCallback, Dispatch, SetStateAction } from 'react'\n\nexport default function useStorage&#x3C;T>(\n  key: string,\n  // 默认值\n  defaultValue?: T | (() => T),\n  // 是否在窗口关闭后保持数据\n  keepOnWindowClosed: boolean = true,\n): [T | undefined,Dispatch&#x3C;SetStateAction&#x3C;T>>, () => void] {\n  const storage = keepOnWindowClosed ? localStorage : sessionStorage\n\n  // 尝试从Storage恢复值(因为在Storeage里的都是String类型)\n  const getStorageValue = () => {\n    try {\n      const storageValue = storage.getItem(key)\n      if (storageValue != null) {\n        return JSON.parse(storageValue)\n      } else if (defaultValue) {\n        // 设置默认值\n        const value = typeof defaultValue === 'function' ? (defaultValue as () => T)() : defaultValue\n        storage.setItem(key, JSON.stringify(value))\n        return value\n      }\n    } catch (err) {\n      console.warn(`useStorage 无法获取${key}: `, err)\n    }\n\n    return undefined\n  }\n\n  const [value, setValue] = useState&#x3C;T | undefined>(getStorageValue)\n\n  // 更新组件状态并保存到Storage\n  const save = useCallback&#x3C;Dispatch&#x3C;SetStateAction&#x3C;T>>>(value => {\n    setValue(prev => {\n      const finalValue = typeof value === 'function' ? (value as (prev: T | undefined) => T)(prev) : value\n      storage.setItem(key, JSON.stringify(finalValue))\n      return finalValue\n    })\n  }, [])\n\n  // 移除状态\n  const clear = useCallback(() => {\n    storage.removeItem(key)\n    setValue(undefined)\n  }, [])\n\n  return [value, save, clear]\n}\n</code></pre>\n<pre><code class=\"language-js\">// 基于js的实现\nimport { useState, useCallback, Dispatch, SetStateAction } from 'react'\n\nexport default function useStorage(key, defaultValue, keepOnWindowClosed = true) {\n    const storage = keepOnWindowClosed ? localStorage : sessionStorage;\n\n    const getStorageValue = () => {\n        try {\n            const storageValue = storage.getItem(key);\n            if(storageValue != null) {\n                return JSON.parse(storageValue);\n            } else if(defaultValue) {\n                const value = defaultValue;\n                storage.setItem(key, JSON.stringify(value));\n                return value;\n            }\n        } catch(error) {\n            console.warn(`无法获取${key}`, error);\n        }\n\n        return undefined;\n    }\n\n    const [value, setValue] = useState(getStorageValue)\n\n    const save = useCallback(valeu => {\n        setValue(prev => {\n            const finalValue = value(prev)\n            storage.setItem(key, JSON.stringify(finalValue))\n            return finalValue\n        })\n    }, [])\n\n    const clear = useCallback(() => {\n        storage.removeItem(key)\n        setValue(undefined)\n    })\n\n    return [value, save, clear]\n}\n</code></pre>","frontmatter":{"title":"关于hook的最佳实践"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/md/react/100个hook案例/"}}}