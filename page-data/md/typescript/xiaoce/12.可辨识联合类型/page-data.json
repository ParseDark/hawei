{"componentChunkName":"component---src-templates-blog-post-js","path":"/md/typescript/xiaoce/12.可辨识联合类型/","result":{"data":{"markdownRemark":{"html":"<h1>可辨识联合类型</h1>\n<p>两个关键概念， 字面量类型， 类型字面量.</p>\n<h3>字面量类型</h3>\n<p>字面量（Literal Type）主要分为 真值字面量类型（boolean literal types）,数字字面量类型（numeric literal types）,枚举字面量类型（enum literal types）,大整数字面量类型（bigInt literal types）和字符串字面量类型（string literal types）。</p>\n<pre><code class=\"language-ts\">// 基本实例\nconst a: 2333 = 2333 // ok\nconst ab : 0b10 = 2 // ok\nconst ao : 0o114 = 0b1001100 // ok\nconst ax : 0x514 = 0x514 // ok\nconst b : 0x1919n = 6425n // ok\nconst c : 'xiaomuzhu' = 'xiaomuzhu' // ok\nconst d : false = false // ok\n\nconst g: 'github' = 'pronhub' // 不能将类型“\"pronhub\"”分配给类型“\"github\"”\n\n\n// 类似枚举的效果： 限定参数\ntype Direction = 'North' | 'East' | 'South' | 'West';\n\nfunction move(distance: number, direction: Direction) {\n    // ...\n}\n</code></pre>\n<h3>类型字面量</h3>\n<p>它跟 JavaScript 中的对象字面量的语法很相似</p>\n<pre><code class=\"language-ts\">type Foo = {\n  baz: [\n    number,\n    'xiaomuzhu'\n  ];\n  toString(): string;\n  readonly [Symbol.iterator]: 'github';\n  0x1: 'foo';\n  \"bar\": 12n;\n};\n</code></pre>\n<p>在一定程度上类型字面量可以代替接口.</p>\n<h3>可辨识联合类型</h3>\n<p>我们先假设一个场景,现在又两个功能,一个是创建用户即 create,一个是删除用户即 delete.</p>\n<pre><code class=\"language-ts\">// 删除需要id， 而创建不需要id\n\ninterface Info {\n    username: string\n}\n\ninterface UserAction {\n    id?: number\n    action: 'create' | 'delete'\n    info: Info\n}\n\n// 创建我们根本不需要id， 但是由于我们上面的定义，我们不得不带上id\nconst action:UserAction = {\n    action:'create',\n    id: 111,\n    info: {\n        username: 'xiaomuzhu'\n    }\n}\n// 这个时候我们就可以使用上面提到的字面量类型来解决这个问题\n\ntype UserAction = | {\n    id: number\n    action: 'delete'\n    info: Info\n} |\n{\n    action: 'create'\n    info: Info\n}\n\n// 此时我们在reducer里就可以这样使用\nconst userReducer = (userAction: UserAction) => {\n    // console.log(userAction.id) // error id file no exist\n    switch (userAction.action) {\n        case 'delete': \n            console.log(userAction.id)\n    }\n}\n</code></pre>\n<p>userAction.action 就是辨识的关键,被称为可辨识的标签,我们发现上面这种模式要想实现必须要三个要素:</p>\n<ol>\n<li>具有普通的单例类型属性—可辨识的特征,上文中就是 delete 与 create 两个有唯一性的字符串字面量</li>\n<li>一个类型别名包含联合类型</li>\n<li>类型守卫的特性,比如我们必须用 if switch 来判断 userAction.action 是属于哪个类型作用域即 delete 与 create</li>\n</ol>","frontmatter":{"title":"12.可辨识联合类型"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/md/typescript/xiaoce/12.可辨识联合类型/"}}}