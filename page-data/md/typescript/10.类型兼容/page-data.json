{"componentChunkName":"component---src-templates-blog-post-js","path":"/md/typescript/10.类型兼容/","result":{"data":{"markdownRemark":{"html":"<h1>类型兼容</h1>\n<h3>结构类型</h3>\n<p>规则： 如果 x 要兼容 y，那么 y 至少具有与 x 相同的属性。</p>\n<p>最小化原则吧， 东西少的兼容东西多的，东西多的不能兼容东西少的.最小化原则.</p>\n<p>我们做一个简单的实验，我们构建一个类 Person,然后声明一个接口 Dog，Dog 的属性 Person 都拥有，而且还多了其他属性，这种情况下 Dog 兼容了 Person。</p>\n<pre><code class=\"language-ts\">class Person {\n    constructor(public weight: number, public name: string, public born: string) {\n\n    }\n}\n\ninterface Dog {\n    name: string\n    weight: number\n}\n\nlet x: Dog\n\nx = new Person(120, 'cxk', '1996-12-12') // OK\n</code></pre>\n<h3>函数的类型兼容性</h3>\n<p>还是符合最小兼容原则。参数多的兼容参数少的。参数少的不能兼容参数多的。</p>\n<pre><code class=\"language-ts\">let x = (a: number) => 0;\nlet y = (b: number, s: string) => 0;\n\ny = x; // OK\nx = y; // Error 不能将类型“(b: number, s: string) => number”分配给类型“(a: number) => number”。\n</code></pre>\n<h3>枚举的类型兼容性</h3>\n<p>枚举与数字类型相互兼容.</p>\n<pre><code class=\"language-ts\">enum Status {\n  Ready,\n  Waiting\n}\n\nlet status = Status.Ready;\nlet num = 0;\n\nstatus = num;\nnum = status;\n</code></pre>\n<h3>类的类型兼容性</h3>\n<ol>\n<li>\n<p>仅仅只有实例成员和方法会相比较，构造函数和静态成员不会被检查.</p>\n<pre><code class=\"language-ts\">class Animal {\nfeet: number;\nconstructor(name: string, numFeet: number) {}\n}\n</code></pre>\n</li>\n</ol>\n<p>class Size {\nfeet: number;\nconstructor(meters: number) {}\n}</p>\n<p>let a: Animal;\nlet s: Size;</p>\n<p>a = s; // OK\ns = a; // OK</p>\n<pre><code>2. 私有的和受保护的成员必须来自于相同的类:\n```ts\nclass Animal {\n  protected feet: number;\n}\nclass Cat extends Animal {}\n\nlet animal: Animal;\nlet cat: Cat;\n\nanimal = cat; // ok\ncat = animal; // ok\n\nclass Size {\n  protected feet: number;\n}\n\nlet size: Size;\n\nanimal = size; // ERROR\nsize = animal; // ERROR\n</code></pre>\n<h3>泛型的类型兼容性</h3>\n<p>根据使用情况不同.</p>\n<pre><code class=\"language-ts\">// 这个例子中泛型没有被使用, 所以可以互相兼容\ninterface Person&#x3C;T> {\n\n}\n\nlet x : Person&#x3C;string>\nlet y : Person&#x3C;number>\n\nx = y // ok\ny = x // ok\n</code></pre>\n<pre><code class=\"language-ts\">// name的类型不一致，无法兼容.\ninterface Person&#x3C;T> {\n    name: T\n}\n\nlet x : Person&#x3C;string>\nlet y : Person&#x3C;number>\n\nx = y // 不能将类型“Person&#x3C;number>”分配给类型“Person&#x3C;string>”。\ny = x // 不能将类型“Person&#x3C;string>”分配给类型“Person&#x3C;number>”。\n</code></pre>","frontmatter":{"title":"10.类型兼容"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/md/typescript/10.类型兼容/"}}}