{"componentChunkName":"component---src-templates-blog-post-js","path":"/md/typescript/6. class/","result":{"data":{"markdownRemark":{"html":"<h1>class</h1>\n<h3>抽象类</h3>\n<p>抽象类做为其它派生类的基类使用,它们一般不会直接被实例化,不同于接口,抽象类可以包含成员的实现细节。</p>\n<pre><code class=\"language-ts\">abstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n</code></pre>\n<p>抽象类不可被实例化， 只可以通过继承被实现。</p>\n<pre><code class=\"language-ts\">class Cat extends Animal {\n\n    makeSound() {\n        console.log('miao miao')\n    }\n}\n\nconst cat = new Cat()\n\ncat.makeSound() // miao miao\ncat.move() // roaming the earch...\n</code></pre>\n<h3>访问限定符</h3>\n<p>TypeScript 中有三类访问限定符，分别是: public、private、protected。</p>\n<ol>\n<li>\n<p>public: 默认， 可以被内外部访问.</p>\n<pre><code class=\"language-ts\">class Car {\npublic run() {\n    console.log('启动...')\n}\n}\n</code></pre>\n</li>\n</ol>\n<p>const car = new Car()</p>\n<p>car.run() // 启动...</p>\n<pre><code>2. private: 当成员被设置为 private 之后, 被此限定符修饰的成员是只可以被类的内部访问。\n```ts\nclass Car {\n    private run() {\n        console.log('启动...')\n    }\n}\n\nconst car = new Car()\n\ncar.run() // error\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>protected： 只可以在子类的内部访问</p>\n<pre><code class=\"language-ts\">class Car {\nprotected run() {\n    console.log('启动...')\n}\n}\n</code></pre>\n</li>\n</ol>\n<p>class GTR extends Car {\ninit() {\nthis.run()\n}\n}</p>\n<p>const car = new Car()\nconst gtr = new GTR()</p>\n<p>car.run() // error: run 是protected类型，只能在card类内部访问\ngtr.init() // 启动...\ngtr.run() // [ts] 属性“run”受保护，只能在类“Car”及其子类中访问。</p>\n<pre><code>### class可以作为接口\n上一节我们讲到接口（interface），实际上类（class）也可以作为接口。\n\n而把 class 作为 interface 使用，在 React 工程中是很常用的。\n\n例如在一个组件中声明props的默认值\n```ts\n// props的类型\nexport default class Props {\n  public children: Array&#x3C;React.ReactElement&#x3C;any>> | React.ReactElement&#x3C;any> | never[] = []\n  public speed: number = 500\n  public height: number = 160\n  public animation: string = 'easeInOutQuad'\n  public isAuto: boolean = true\n  public autoPlayInterval: number = 4500\n  public afterChange: () => {}\n  public beforeChange: () => {}\n  public selesctedColor: string\n  public showDots: boolean = true\n}\n</code></pre>","frontmatter":{"title":"6. class"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/md/typescript/6. class/"}}}